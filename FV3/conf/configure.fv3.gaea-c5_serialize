############
# commands #
############

# Note that FC, CC, and CXX are implicitly defined variables in makefiles. Therefore 
# special handling is required to give them default values.
# https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html
# https://stackoverflow.com/questions/18007326/how-to-change-default-values-of-variables-like-cc-in-makefile
# https://www.gnu.org/software/make/manual/html_node/Origin-Function.html#Origin-Function
ifeq ($(origin FC),default)
FC = ftn
endif
ifeq ($(origin CC),default)
CC = cc -DHAVE_GETTID
endif
ifeq ($(origin CXX),default)
CXX = CC
endif
LD = ftn

#########
# flags #
#########
# default is 64-bit OpenMP non-hydrostatic build using AVX2
DEBUG =
REPRO =
VERBOSE =
OPENMP = Y
AVX2 = Y
HYDRO = N
32BIT = N

MPI_ROOT = $(MPICH_DIR)

ESMF_INC = $(ESMF_DIR)/include
ESMF_LIB = $(ESMF_DIR)/lib

NEMSIOINC = -I$(NCEPLIBS_DIR)/include
NCEPLIBS = $(ESMF_LIB) -L$(NCEPLIBS_DIR)/lib -lnemsio_d -lbacio_4 -lsp_v2.0.2_d -lw3emc_d -lw3nco_d

##############################################
# Need to use at least GNU Make version 3.81 #
##############################################
need := 3.81
ok := $(filter $(need),$(firstword $(sort $(MAKE_VERSION) $(need))))
ifneq ($(need),$(ok))
$(error Need at least make version $(need).  Load module gmake/3.81)
endif

NETCDF_ROOT = $(NETCDF_DIR)
INCLUDE = -I$(NETCDF_ROOT)/include -I$(SERIALBOX_ROOT)/include $(ESMF_INC)

# The FPPFLAGS option -DHARMONIZE_PROCEDURE_POINTER_INTENTS is specified
# to avoid unwanted errors when compiling the model. The source of the
# errors is the mismatch between the way the "intent" of the arguments 
# are defined in the interface definition of the proceduce pointer used
# in the atmos_model.F90 and the way the "intent" of the arguments are
# defined in the procedures the pointer points to.  This issue comes up
# when using newer Intel compilers.
FPPFLAGS := -cpp -Wp,-w -DHARMONIZE_PROCEDURE_POINTER_INTENTS $(INCLUDE)
CFLAGS := $(INCLUDE)

FFLAGS := $(INCLUDE) -fcray-pointer -ffree-line-length-none -fno-range-check -fbacktrace -fallow-argument-mismatch

CPPDEFS += -Duse_libMPI -Duse_netCDF -DSPMD -DUSE_LOG_DIAG_FIELD_INFO -DUSE_GFSL63 -DGFS_PHYS -DSERIALIZE 
CPPDEFS += -DNEW_TAUCTMAX -DINTERNAL_FILE_NML -DNO_INLINE_POST -Duse_LARGEFILE

ifeq ($(GT4PY_DEV),Y)
CPPDEFS += -DGT4PY_DEV
endif

ifeq ($(AI2_SUBSET_PHYSICS),Y)
CPPDEFS += -DAI2_SUBSET_PHYSICS
endif

ifeq ($(HYDRO),Y)
CPPDEFS += 
else
CPPDEFS += -DMOIST_CAPPA -DUSE_COND
endif

ifeq ($(32BIT),Y)
CPPDEFS += -DOVERLOAD_R4 -DOVERLOAD_R8
else
FFLAGS += -fdefault-double-8 -fdefault-real-8
endif

ifeq ($(AVX),Y)
FFLAGS += -march=native
CFLAGS += -march=native
else
FFLAGS += -march=native
CFLAGS += -march=native
endif

FFLAGS_OPT = -O2 -fno-range-check
FFLAGS_REPRO = -O2 -ggdb -fno-range-check
FFLAGS_DEBUG = -O0 -ggdb -fno-unsafe-math-optimizations -frounding-math -fsignaling-nans -ffpe-trap=invalid,zero,overflow -fbounds-check

TRANSCENDENTALS :=
FFLAGS_OPENMP = -fopenmp
FFLAGS_VERBOSE = -v

CFLAGS_OPT = -O2
CFLAGS_REPRO = -O2 -ggdb
CFLAGS_OPENMP = -fopenmp
CFLAGS_DEBUG = -O0 -g -ggdb

# Optional Testing compile flags.  Mutually exclusive from DEBUG, REPRO, and OPT
# *_TEST will match the production if no new option(s) is(are) to be tested.
FFLAGS_TEST = -O3 -debug minimal
CFLAGS_TEST = -O2

LDFLAGS :=
LDFLAGS +=  -L$(SERIALBOX_ROOT)/lib  -lSerialboxFortran -lSerialboxC -lSerialboxCore -L/lib/x86_64-linux-gnu -lpthread -lstdc++ -lstdc++fs
LDFLAGS_OPENMP := -fopenmp
LDFLAGS_VERBOSE := -Wl,-V,--verbose,-cref,-M

# start with blank LIBS
LIBS :=
LIBS += $(ESMF_LIB)

ifneq ($(REPRO),)
CFLAGS += $(CFLAGS_REPRO)
FFLAGS += $(FFLAGS_REPRO)
FAST :=
else ifneq ($(DEBUG),)
CFLAGS += $(CFLAGS_DEBUG)
FFLAGS += $(FFLAGS_DEBUG)
FAST :=
else ifneq ($(TEST),)
CFLAGS += $(CFLAGS_TEST)
FFLAGS += $(FFLAGS_TEST)
FAST :=
else
CFLAGS += $(CFLAGS_OPT)
FFLAGS += $(FFLAGS_OPT)
FAST := $(TRANSCENDENTALS)
endif

ifneq ($(OPENMP),)
CFLAGS += $(CFLAGS_OPENMP)
FFLAGS += $(FFLAGS_OPENMP)
LDFLAGS += $(LDFLAGS_OPENMP)
# to correct a loader bug on gaea: envars below set by module load intel
LIBS += -L$(INTEL_PATH)/$(INTEL_MAJOR_VERSION)/$(INTEL_MINOR_VERSION)/lib/intel64 -lifcoremt
endif

ifneq ($(VERBOSE),)
CFLAGS += $(CFLAGS_VERBOSE)
FFLAGS += $(FFLAGS_VERBOSE)
LDFLAGS += $(LDFLAGS_VERBOSE)
endif

ifneq ($(CALLPYFORT),)
FFLAGS += -I$(CALLPYFORT)/build/src -DENABLE_CALLPYFORT
LDFLAGS += -L$(CALLPYFORT)/build/src -lcallpy 
endif

ifneq ($(findstring netcdf/4,$(LOADEDMODULES)),)
  LIBS += -lnetcdff -lnetcdf -lhdf5_hl -lhdf5 -lz
else
  LIBS += -lnetcdf
endif

LDFLAGS += $(LIBS) $(FMS_DIR)/libFMS/.libs/libFMS.a
